{
  "version": 3,
  "sources": ["../../../../src/events/Bot/interactionCreate.ts"],
  "sourcesContent": ["import { ChannelType, CommandInteractionOptionResolver, ContextMenuCommandInteraction, EmbedBuilder } from \"discord.js\";\nimport { Event } from \"../../structures/Classes/Event\";\nimport { ContextCommandType } from \"../../structures/Types/ContextCommandType\";\nimport { ExtendedInteraction, SlashCommandType } from \"../../structures/Types/SlashCommandType\";\n\nexport default new Event({\n  name: \"interactionCreate\",\n  run(client, interaction) {\n    if (interaction.isChatInputCommand()) {\n      let command = client.slashCommands.get(interaction.commandName) as SlashCommandType\n\n      if (!command) {\n        return;\n      }\n/*\n      if (command?.config?.developer && interaction.user.id !== client.application.owner.id) {\n        return interaction.reply({\n          embeds: [\n            new EmbedBuilder()\n              .setColor(\"Red\")\n              .setTitle(\"\u26A0\uFE0F Error\")\n              .setDescription(`\\`\\`\\`Only my developer can use this command.\\`\\`\\``)\n          ],\n          ephemeral: true\n        })\n      }\n\n      if (command?.config?.nsfw && interaction.channel.type === ChannelType.GuildText && !interaction.channel.nsfw) {\n        return interaction.reply({\n          embeds: [\n            new EmbedBuilder()\n              .setColor(\"Red\")\n              .setTitle(\"\u26A0\uFE0F Error\")\n              .setDescription(`\\`\\`\\`You can only run this command in a NSFW enabled channel.\\`\\`\\``)\n          ],\n          ephemeral: true\n        })\n      }\n\n      if (command?.config?.owner && interaction.user.id !== interaction.guild.ownerId) {\n        return interaction.reply({\n          embeds: [\n            new EmbedBuilder()\n              .setColor(\"Red\")\n              .setTitle(\"\u26A0\uFE0F Error\")\n              .setDescription(`\\`\\`\\`Only the owner of this server can use this command.\\`\\`\\``)\n          ],\n          ephemeral: true\n        })\n      }\n\n      if (command?.permissions?.user && !interaction.memberPermissions.has(command.permissions.user || [])) {\n        return interaction.reply({\n          embeds: [\n            new EmbedBuilder()\n              .setColor(\"Red\")\n              .setTitle(\"\u26A0\uFE0F Error\")\n              .setDescription(`\\`\\`\\`You do not have the permissions to use this command.\\`\\`\\``)\n              .addFields([\n                {\n                  name: \"Permissions Needed:\",\n                  value: `\\`\\`\\`${command.permissions.user.join(\"\\n\")}\\`\\`\\``\n                }\n              ])\n          ],\n          ephemeral: true\n        })\n      }\n\n      if (command?.permissions?.me && !interaction.guild.members.me.permissions.has(command.permissions.me || [])) {\n        return interaction.reply({\n          embeds: [\n            new EmbedBuilder()\n              .setColor(\"Red\")\n              .setTitle(\"\u26A0\uFE0F Error\")\n              .setDescription(`\\`\\`\\`You do not have the permissions to use this command.\\`\\`\\``)\n              .addFields([\n                {\n                  name: \"Permissions Needed:\",\n                  value: `\\`\\`\\`${command.permissions.user.join(\"\\n\")}\\`\\`\\``\n                }\n              ])\n          ],\n          ephemeral: true\n        })\n      }\n*/\n      command.run({ \n        args: interaction.options as CommandInteractionOptionResolver,\n        client,\n        interaction: interaction as ExtendedInteraction\n      })\n    }\n\n    if (interaction.isContextMenuCommand()) {\n      let command = client.slashCommands.get(interaction.commandName) as ContextCommandType\n\n      command.run({\n        client,\n        interaction\n      })\n    }\n  },\n})"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AACA,mBAAsB;AAItB,IAAO,4BAAQ,IAAI,mBAAM;AAAA,EACvB,MAAM;AAAA,EACN,IAAI,QAAQ,aAAa;AACvB,QAAI,YAAY,sBAAsB;AACpC,UAAI,UAAU,OAAO,cAAc,IAAI,YAAY;AAEnD,UAAI,CAAC,SAAS;AACZ;AAAA;AA2EF,cAAQ,IAAI;AAAA,QACV,MAAM,YAAY;AAAA,QAClB;AAAA,QACA;AAAA;AAAA;AAIJ,QAAI,YAAY,wBAAwB;AACtC,UAAI,UAAU,OAAO,cAAc,IAAI,YAAY;AAEnD,cAAQ,IAAI;AAAA,QACV;AAAA,QACA;AAAA;AAAA;AAAA;AAAA;",
  "names": []
}
