{
  "version": 3,
  "sources": ["../../../src/structures/Client.ts"],
  "sourcesContent": ["import { ApplicationCommandDataResolvable, Client, ClientEvents, Collection } from \"discord.js\";\nimport { botConfig } from \"./Config/botConfig\";\nimport \"../webserver/link.ts\"\nimport { RegisterCommands } from \"./Interfaces/RegisterCommand\";\nimport { CommandType } from \"./Types/CommandType\";\nimport { SlashCommandType } from \"./Types/SlashCommandType\";\nimport { ContextCommandType } from \"./Types/ContextCommandType\";\nimport { glob } from \"glob\";\nimport chalk from \"chalk\";\nimport { promisify } from \"util\";\nimport { Event } from \"./Classes/Event\";\nimport { Database } from \"./Database/index\";\nimport { Vulkava } from \"vulkava\";\nimport { Manager } from \"./Music/NoellyLavalink\";\nimport { Nodes } from \"./Music/Nodes\"\nlet globPromise = promisify(glob)\n\nexport class Noelly extends Client {\n  commands: Collection<string, CommandType> = new Collection();\n  aliases: Collection<string, string> = new Collection()\n  slashCommands: Collection<string, SlashCommandType | ContextCommandType> = new Collection();\n  manager: Manager;\n  config = botConfig;\n\n  constructor() {\n    super({\n      intents: [\n        \"DirectMessages\",\n        \"GuildMembers\",\n        \"GuildMessages\",\n        \"GuildPresences\",\n        \"Guilds\",\n        \"MessageContent\",\n        \"GuildVoiceStates\"\n      ],\n    });\n    this.manager = new Manager(this, Nodes);\n  }\n\n  async start() {\n    console.clear();\n    const database = new Database(this); \n    await database.start();\n    this.login(process.env.TOKEN)\n    this.loadFiles()\n  }\n\n  private async registerCommands({ commands, guild }: RegisterCommands) {\n    console.log(chalk.white.bold(\"\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501[ Client ]\"))\n    if (guild) {\n      let server = this.guilds.cache.get(guild)\n      await server?.commands.set(commands)\n      console.log(`${chalk.whiteBright.bold(`[ ${chalk.blueBright.bold(\"Client\")} ]`)} Loaded to: ${chalk.greenBright.bold(`${server.name}`)}`)\n    } else {\n      this?.application?.commands.set(commands)\n      console.log(`${chalk.whiteBright.bold(`[ ${chalk.blueBright.bold(\"Client\")} ]`)} Loaded to: ${chalk.greenBright.bold(\"All\")}`)\n    }\n  }\n\n  private async importFile(filePath: string) {\n    return (await import(filePath))?.default\n  }\n\n  private async loadFiles() {\n    let arrayCommands: ApplicationCommandDataResolvable[] = []\n\n    let LegacyCommandFiles = await globPromise(`${__dirname}/../commands/**/*{.ts,.js}`);\n    console.log(chalk.white.bold(\"\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501[ Legacy Commands ]\"))\n    if (LegacyCommandFiles.length == 0) console.log(`${chalk.whiteBright.bold(`[ ${chalk.blueBright.bold(\"Legacy Commands\")} ]`)} Loaded: ${chalk.redBright.bold(`None Loaded`)}`)\n    LegacyCommandFiles.forEach(async (filePath) => {\n      let file: CommandType = await this.importFile(filePath)\n      let splitted = filePath.split(\"/\")\n      let directory = splitted[splitted.length - 2]\n\n      if (!file?.name) console.log(`${chalk.whiteBright.bold(`[ ${chalk.blueBright.bold(\"Legacy Commands\")} ]`)} Loaded: ${chalk.redBright.bold(\"No Name\")}`)\n\n      if (file.name) {\n        let properties = { ...file, directory }\n        this.commands.set(file.name, properties)\n        console.log(`${chalk.whiteBright.bold(`[ ${chalk.blueBright.bold(\"Legacy Commands\")} ]`)} Loaded: ${chalk.greenBright.bold(`${file.name}`)}`)\n      } if (file.aliases) {\n        file.aliases.forEach(alias => this.aliases.set(alias, file.name))\n      }\n    })\n\n    let SlashCommandFiles = await globPromise(`${__dirname}/../interactions/**/*{.ts,.js}`);\n    console.log(chalk.white.bold(\"\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501[ Slash Commands ]\"))\n    if (SlashCommandFiles.length == 0) console.log(`${chalk.whiteBright.bold(`[ ${chalk.blueBright.bold(\"Slash Commands\")} ]`)} Loaded: ${chalk.redBright.bold(`None Loaded`)}`)\n    SlashCommandFiles.forEach(async (filePath) => {\n      let file: SlashCommandType = await this.importFile(filePath)\n      let splitted = filePath.split(\"/\")\n      let directory = splitted[splitted.length - 2]\n      \n      if (!file?.name) console.log(`${chalk.whiteBright.bold(`[ ${chalk.blueBright.bold(\"Legacy Commands\")} ]`)} Loaded: ${chalk.redBright.bold(\"No Name\")}`)\n\n      if (file.name) {\n        let properties = { ...file, directory }\n        this.slashCommands.set(file.name, properties)\n        arrayCommands.push(file)\n        console.log(`${chalk.whiteBright.bold(`[ ${chalk.blueBright.bold(\"Slash Commands\")} ]`)} Loaded: ${chalk.greenBright.bold(`${file.name}`)}`)\n      }\n    })\n\n    this.on(\"ready\", async () => {\n      await this.registerCommands({\n        commands: arrayCommands,\n        // guild: \"Your server ID\",\n      })\n    })\n\n    let EventFiles = await globPromise(`${__dirname}/../events/**/*{.ts,.js}`);\n    console.log(chalk.white.bold(\"\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501[ Events ]\"))\n    if (EventFiles.length == 0) console.log(`${chalk.whiteBright.bold(`[ ${chalk.blueBright.bold(\"Events\")} ]`)} Loaded: ${chalk.redBright.bold(`None Loaded`)}`)\n    EventFiles.forEach(async (filePath) => {\n      let file: Event<keyof ClientEvents> = await this.importFile(filePath)\n\n      if (file?.options.name) {\n        if (file.options.once) {\n          this.once(file.options.name, file.options.run.bind(null, this))\n        } else {\n          this.on(file.options.name, file.options.run.bind(null, this))\n        }\n        console.log(`${chalk.whiteBright.bold(`[ ${chalk.blueBright.bold(\"Events\")} ]`)} Loaded: ${chalk.greenBright.bold(`${file.options.name}`)}`)\n      } else {\n        await this.importFile(filePath)\n      }\n    })\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
